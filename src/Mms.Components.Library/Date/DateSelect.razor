<div @onclick="() => ClosePopup()" class="@(_visible ? "visible" : "invisible")   fixed z-10 inset-0 transition-opacity"></div>

<div class="relative w-full">

    <button type="button" @onclick="() => TogglePopup()" class="flex items-center w-full border rounded-md p-1 hover:bg-blue-50">
        @if (Date == DateOnly.MinValue)
        {
            <span class="ml-2 mr-auto">
                Select date
            </span>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-400">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z" />
            </svg>
        }
        else
        {
            <span class="ml-2 mr-auto">
                @Date.ToString("dddd, dd MMMM yyyy")
            </span>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-400">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z" />
            </svg>
        }
    </button>

    @if(_visible)
    {
        <div class="w-72 absolute top-[10.5] z-10 origin-top rounded-md bg-white text-center p-2
                    shadow-lg ring-1 ring-gray-900/5 focus:outline-none" tabindex="-1">

            <div class="flex flex-col justify-between">

                <MonthYearSelector DateChanged="DateViewUpdated" Month="ViewMonth" Year="ViewYear" />
                <DailyHeaders />
                <DaysInMonth Month="ViewMonth" Year="ViewYear" SelectedDate="Date" SelectedDateChanged="SelectedDateChanged" />

            </div>

        </div>
    }

</div>

@code {

    [Parameter]
    public DateOnly Date { get; set; } = DateOnly.FromDateTime(DateTime.Now);

    public int ViewMonth { get; set; }
    public int ViewYear { get; set; }
    public void DateViewUpdated(DateOnly value)
    {
        ViewMonth = value.Month;
        ViewYear = value.Year;
    }
    protected override void OnParametersSet()
    {
        ViewMonth = Date.Month;
        ViewYear = Date.Year;
    }

    public void SelectedDateChanged(DateOnly value)
    {
        Date = value;

        ViewMonth = value.Month;
        ViewYear = value.Year;

        _visible = false;
    }

    private bool _visible = false;

    void ClosePopup() => _visible = false;
    void TogglePopup() => _visible = !_visible;
}