<div @onclick="() => ClosePopup()" class="@(_dropdownVisible ? "visible" : "invisible") fixed z-20 inset-0 transition-opacity"></div>

<div class="relative w-full">

    <button type="button" @onclick="() => TogglePopup()" class="flex items-center w-full border rounded-md border-gray-300 p-1 bg-white">
        @if (Date == DateOnly.MinValue)
        {
            <span class="ml-2 mr-auto">
                Select date
            </span>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 @(ThemeState.IconColour)">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z" />
            </svg>
        }
        else
        {
            <span class="ml-2 mr-auto">
                @Date.ToString("dddd, dd MMMM yyyy")
            </span>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 @(ThemeState.IconColour)">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z" />
            </svg>
        }
    </button>

    @if (_dropdownVisible)
    {
        <div class="w-72 absolute top-[10.5] z-20 origin-top rounded-md bg-white text-center p-2
                    shadow-lg ring-1 ring-gray-900/5 focus:outline-none" tabindex="-1">

            <div class="flex flex-col justify-between">

                @switch (_dateSelectorView)
                {
                    case DateSelectorView.Days:
                        <DaySelectorMonthHeader DateChanged="DateViewUpdated" MonthYearChange="MonthSelectedOpen" Month="_viewMonth" Year="_viewYear" />
                        <div class="border-t mx-1 mt-1"></div>
                        <DaySelectorHeader />
                        <div class="border-t mx-1 mb-1"></div>
                        <DaySelectorDays Month="_viewMonth" Year="_viewYear" SelectedDate="Date" SelectedDateChanged="SelectedDateChanged" />
                        <div class="border-t mx-1 my-1"></div>
                        <div class="flex flex-row gap-x-2 mx-1 mt-1 justify-end">
                            <button @onclick="() => ClearDate()" class="@(ThemeState.ButtonColour) hover:@(ThemeState.ButtonHoverColour) rounded border px-2 py-0.5 text-xs @(ThemeState.ButtonTextColour)">Clear</button>
                            <button @onclick="() => ClosePopup()" class="@(ThemeState.ButtonColour) hover:@(ThemeState.ButtonHoverColour) rounded border px-2 py-0.5 text-xs @(ThemeState.ButtonTextColour)">Close</button>
                        </div>
                        break;
                    case DateSelectorView.Years:
                    case DateSelectorView.Months:
                        <MonthSelector DateSelectorViewState="_dateSelectorView" DateChanged="DateViewUpdated" ClosePopup="ClosePopup"
                                       CloseMonthSelected="MonthSeletedClose" Month="_viewMonth" Year="_viewYear" SelectedDate="Date" />
                        break;
                }

            </div>
        </div>
    }

</div>

@code {

    [CascadingParameter]
    protected ThemeState ThemeState { get; set; } = default!;

    [Parameter]
    public DateOnly Date { get; set; } = DateOnly.FromDateTime(DateTime.Now);

    private DateSelectorView _dateSelectorView = DateSelectorView.Days;
    private int _viewMonth;
    private int _viewYear;
    private bool _dropdownVisible = false;

    protected override void OnParametersSet()
    {
        _viewMonth = Date.Month;
        _viewYear = Date.Year;
    }

    private void DateViewUpdated(DateOnly value)
    {
        _viewMonth = value.Month;
        _viewYear = value.Year;

        _dateSelectorView = DateSelectorView.Days;
    }

    private void SelectedDateChanged(DateOnly value)
    {
        Date = value;

        _viewMonth = value.Month;
        _viewYear = value.Year;

        _dropdownVisible = false;
    }

    private void ClosePopup()
    {
        _dropdownVisible = false;
        _dateSelectorView = DateSelectorView.Days;
    }

    private void TogglePopup() => _dropdownVisible = !_dropdownVisible;

    private void ClearDate()
    {
        Date = DateOnly.MinValue;
        var today = DateTime.Today;

        _viewMonth = today.Month;
        _viewYear = today.Year;

        _dateSelectorView = DateSelectorView.Days;
        _dropdownVisible = false;
    }

    private void MonthSelectedOpen()
    {
        _dateSelectorView = DateSelectorView.Months;
    }

    private void MonthSeletedClose()
    {
        _dateSelectorView = DateSelectorView.Days;
    }
}