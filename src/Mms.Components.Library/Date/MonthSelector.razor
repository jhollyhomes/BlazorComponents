@using System.Globalization

@switch (DateSelectorViewState)
{
    case DateSelectorView.Months:
            <div class="flex flex-row justify-between p-1">
                <DateSelectorNavigateLeft ButtonClick="PreviousYear" />
                <DateSelectorNavigationHeader ButtonClick="ChangeYear">
                    <span>@(Year.ToString("D4"))</span>
                </DateSelectorNavigationHeader>
                <DateSelectorNavigateRight ButtonClick="NextYear" />
            </div>

            <div class="my-1"></div>

            @for (int j = 0; j < 10; j += 3)
            {
                <div class="flex flex-row justify-evenly my-0.5">  
                    @for (int i = 1; i <= 3; i++)
                    {
                        var month = i + j;

                        if (SelectedDate.Year.Equals(Year) && (SelectedDate.Month.Equals(month)))
                        {
                            <button @onclick="() => MonthClick(month)" class="w-20 bg-blue-50 border rounded p-1 text-xs font-medium text-gray-500 hover:bg-blue-200">
                                @DateTimeFormatInfo.CurrentInfo.GetMonthName(month)
                            </button>
                        }
                        else
                        {
                            <button @onclick="() => MonthClick(month)" class="w-20 bg-gray-50 border rounded p-1 text-xs font-medium text-gray-500 hover:bg-blue-50">
                                @DateTimeFormatInfo.CurrentInfo.GetMonthName(month)
                            </button>
                        }
                    }
                </div>
            }
        break;
    case DateSelectorView.Years:
        <div class="flex flex-row justify-between p-1">
            <DateSelectorNavigateLeft ButtonClick="PreviousYears" />
            <DateSelectorNavigationHeader>
                <span>@((Year - 5).ToString("D4"))</span> - <span>@((Year + 6).ToString("D4"))</span>
            </DateSelectorNavigationHeader>
            <DateSelectorNavigateRight ButtonClick="NextYears" />
        </div>

        <div class="my-1"></div>

        @for (int j = Year - 6; j < Year + 6; j += 3)
        {
            <div class="flex flex-row justify-evenly my-0.5">
                @for (int i = 1; i <= 3; i++)
                {
                    var year = i + j;

                    if (SelectedDate.Year.Equals(year))
                    {
                        <button @onclick="() => YearClick(year)" class="w-20 bg-blue-50 border rounded p-1 text-xs font-medium text-gray-500 hover:bg-blue-200">
                            @(year.ToString("D4"))
                        </button>
                    }
                    else
                    {
                        <button @onclick="() => YearClick(year)" class="w-20 bg-gray-50 border rounded p-1 text-xs font-medium text-gray-500 hover:bg-blue-50">
                            @(year.ToString("D4"))
                        </button>
                    }
                }
            </div>
        }
        break;
}

<div class="border-t mx-2 my-2"></div>

<div class="flex flex-row gap-x-2 mx-1 justify-end">
    <button @onclick="() => Back()" class="bg-blue-50 rounded border px-2 py-0.5 text-xs text-gray-600 hover:bg-blue-100">Back</button>
    <button @onclick="() => Close()" class="bg-blue-50 rounded border px-2 py-0.5 text-xs text-gray-600 hover:bg-blue-100">Close</button>
</div>


@code {

    [Parameter, EditorRequired]
    public int Month { get; set; }

    [Parameter, EditorRequired]
    public int Year { get; set; }

    [Parameter]
    public DateOnly SelectedDate { get; set; }

    [Parameter]
    public EventCallback<DateOnly> DateChanged { get; set; }

    [Parameter]
    public EventCallback CloseMonthSelected { get; set; }

    [Parameter]
    public EventCallback ClosePopup { get; set; }

    [Parameter]
    public DateSelectorView DateSelectorViewState { get; set; }

    private void ChangeYear()
    {
        DateSelectorViewState = DateSelectorView.Years;
    }

    private void PreviousYear()
    {
        if (Year > 1)
        {
            Year--;
        }
    }

    private void NextYear()
    {
        Year++;
    }

    private void PreviousYears()
    {
        if (Year - 12 > 1)
        {
            Year -= 12;
        }
    }

    private void NextYears()
    {
        Year += 12;
    }

    void MonthClick(int value)
    {
        Month = value;

        DateChanged.InvokeAsync(new DateOnly(Year, Month, 1));
    }

    void YearClick(int value)
    {
        Year = value;

        DateSelectorViewState = DateSelectorView.Months;
    }

    void Close()
    {
        ClosePopup.InvokeAsync();
    }

    void Back()
    {
        if (DateSelectorViewState == DateSelectorView.Months)
        {
            CloseMonthSelected.InvokeAsync();
        }
        else if (DateSelectorViewState == DateSelectorView.Years)
        {
            DateSelectorViewState = DateSelectorView.Months;
        }
    }
}