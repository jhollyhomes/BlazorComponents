@using System.Globalization

<div class="flex flex-row justify-between p-1">

    <button @onclick="(() => PreviousYear())" class="rounded-md border border-white hover:bg-gray-50 hover:border-gray-200">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4 m-1 text-gray-500">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
        </svg>
    </button>

    <button @onclick="(() => ChangeYear())" class="px-2 text-gray-600 text-sm font-medium rounded-md border border-white hover:bg-gray-50 hover:border-gray-200">
        <span>@(Year.ToString("D4"))</span>
    </button>

    <button @onclick="(() => NextYear())" class="rounded-md border border-white hover:bg-gray-50 hover:border-gray-200">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4 m-1 text-gray-600">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
        </svg>
    </button>

</div>

<div class="my-1"></div>

@for (int j = 0; j < 10; j += 3)
{
    <div class="flex flex-row justify-evenly my-0.5">
        @for (int i = 1; i <= 3; i++)
        {
            var month = i + j;
            <button @onclick="() => MonthClick(month)" class="w-20 bg-gray-50 border rounded p-1 text-xs font-medium text-gray-500 hover:bg-blue-50">
                @DateTimeFormatInfo.CurrentInfo.GetMonthName(month)
            </button>
        }
    </div>
}

<div class="border-t mx-2 my-2"></div>

<div class="flex flex-row gap-x-2 mx-1 justify-end">
    <button @onclick="() => Back()" class="bg-blue-50 rounded border px-2 py-0.5 text-xs text-gray-600 hover:bg-blue-100">Back</button>
    <button @onclick="() => Close()" class="bg-blue-50 rounded border px-2 py-0.5 text-xs text-gray-600 hover:bg-blue-100">Close</button>
</div>

@code {

    [Parameter, EditorRequired]
    public int Month { get; set; }

    [Parameter, EditorRequired]
    public int Year { get; set; }

    [Parameter]
    public EventCallback<DateOnly> DateChanged { get; set; }

    [Parameter]
    public EventCallback CloseMonthSelected { get; set; }

    [Parameter]
    public EventCallback ClosePopup { get; set; }

    private void ChangeYear()
    {

    }

    private void PreviousYear()
    {
        if (Year > 1)
        {
            Year--;
        }
    }

    private void NextYear()
    {
        Year++;
    }

    void MonthClick(int value)
    {
        Month = value;

        DateChanged.InvokeAsync(new DateOnly(Year, Month, 1));
    }

    void Close()
    {
        ClosePopup.InvokeAsync();
    }

    void Back()
    {
        CloseMonthSelected.InvokeAsync();
    }
}