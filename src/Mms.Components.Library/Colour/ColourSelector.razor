<div @onclick="() => ClosePopup()" class="@(_dropdownVisible ? "visible" : "invisible") fixed z-20 inset-0 transition-opacity"></div>

<div class="relative w-full">
    <div class="flex h-6">
        <button @onclick="TogglePopup" class="bg-@(CurrentColour.RemoveTailwindPrefix()) shadow-xl border border-gray-300 
                hover:outline-none hover:ring-2 hover:ring-blue-200 hover:ring-offset-2 w-5 h-5">
        </button>

        @ChildContent
    </div>

    @if (_dropdownVisible)
    {
        <ColourPopupSelector OnClose="ClosePopup" OnColourSelected="ColourSelected" />
    }

</div>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter]
    public string CurrentColour { get; set; } = default!;

    [Parameter]
    public ColourTypes ColourType { get; set; } = ColourTypes.Text;

    [Parameter]
    public EventCallback<string> ColourChanged { get; set; } = default!;

    private bool _dropdownVisible = false;

    private void TogglePopup() => _dropdownVisible = !_dropdownVisible;

    private void ClosePopup() => _dropdownVisible = false;

    private void ColourSelected(SelectedColour selectedColour)
    {
        var colour = selectedColour.CreateColourCss(ColourType);

        _dropdownVisible = false;

        ColourChanged.InvokeAsync(colour);
    }
}
