<div class="relative w-full">
    <button type="button" class="@_toggleButtonClass relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent 
                                transition-colors duration-200 ease-in-out hover:outline-none hover:ring-2 hover:ring-blue-200 hover:ring-offset-2"
            role="switch" aria-checked="false" @onclick="OnButtonClick">
        <span aria-hidden="true" class="@_toggleSpanClass pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow 
                                        ring-0 transition duration-200 ease-in-out"></span>
    </button>
    @ChildContent
</div>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter, EditorRequired]
    public ToggleState Value { get; set; }

    private string _toggleButtonClass = default!;
    private string _toggleSpanClass = default!;

    private void SetToggleOn()
    {
        _toggleButtonClass = "bg-blue-200";
        _toggleSpanClass = "translate-x-5";
    }

    private void SetToggleOff()
    {
        _toggleButtonClass = "bg-gray-200";
        _toggleSpanClass = "translate-x-0";
    }

    protected override void OnParametersSet()
    {
        if (Value == ToggleState.On)
        {
            SetToggleOn();
        }
        else if(Value == ToggleState.Off)
        {
            SetToggleOff();
        }
    }

    private void OnButtonClick()
    {
        if (Value == ToggleState.On)
        {
            Value = ToggleState.Off;

            SetToggleOff();

            ValueChanged.InvokeAsync(false);
        }
        else if (Value == ToggleState.Off)
        {
            Value = ToggleState.On;

            SetToggleOn();

            ValueChanged.InvokeAsync(true);
        }
    }
}