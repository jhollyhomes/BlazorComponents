<div @onclick="() => ClosePopup()" class="@(_dropdownVisible ? "visible" : "invisible") fixed z-20 inset-0 transition-opacity"></div>

<div class="relative w-full">

    <button type="button" @onclick="() => TogglePopup()" class="flex items-center w-full bg-white border shadow-sm border-gray-300 rounded-md p-1">
        <span class="block truncate">
            @if (items != null)
            {
                @switch (items.Count(x => x.IsChecked))
                {
                    case 0:
                        <span class="px-2 py-0.5">Select items</span>
                        break;
                    case > MAX_ITEMS_TO_DISPLAY:
                        <span class="px-2 py-0.5">@items.Count(x => x.IsChecked) items selected</span>
                        break;
                    default:
                        @foreach (var selected in items.Where(x => x.IsChecked))
                        {
                            <span @onclick="() => Toggle(selected.Key)" @onclick:stopPropagation="true" class="px-2 py-0.5 mx-0.5 text-xs font-normal text-center inline-flex items-center border rounded-lg @(ThemeState.ButtonColour) hover:@(ThemeState.ButtonHoverColour) @(ThemeState.ButtonTextColour)">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3 h-3 me-1 @(ThemeState.ButtonTextColour)">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                                @selected.Value
                            </span>
                        }
                        break;
                }                
            }
        </span>
    </button>

    @if (_dropdownVisible)
    {
        <div class="w-full absolute top-[10.5] z-20 origin-top rounded-md bg-white text-center py-2 shadow-lg ring-1 ring-gray-900/5 focus:outline-none"
                tabindex="-1">

            <div class="flex flex-col justify-between">
                @if (items != null)
                {
                    @foreach (var item in items)
                    {
                        <button @onclick="() => Toggle(item.Key)" class="flex flex-row items-center px-3 py-0.5 cursor-pointer hover:bg-gray-200 select-none">
                            <input id="@item.Key" name="@item.Key" @bind="@item.IsChecked" type="checkbox" class="h-4 w-4 cursor-pointer rounded bg-blue-500 border-gray-300 text-indigo-600 focus:ring-indigo-600">
                            <span class="ml-3 cursor-pointer block text-sm leading-6 text-gray-900">@item.Value</span>
                        </button>
                    }
                }
            </div>

        </div>
    }

</div>