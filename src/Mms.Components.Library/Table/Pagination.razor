@if (TotalPages > 0)
{
    <nav class="ml-auto mr-1 isolate flex gap-y-1" aria-label="Pagination">

        <button @onclick="@(() => OnChange.InvokeAsync(1))" disabled="@(HasPreviousPage() ? null : "disabled")"
                class="relative inline-flex items-center bg-white px-2 py-1 text-sm font-semibold border-y border-l rounded-l
                     @(HasPreviousPage() ? "text-gray-600 hover:bg-gray-100" : "text-gray-200")">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M18.75 19.5l-7.5-7.5 7.5-7.5m-6 15L5.25 12l7.5-7.5" />
            </svg>
        </button>

        <button @onclick="@(() => OnChange.InvokeAsync(PageNumber - 1))" disabled="@(HasPreviousPage() ? null : "disabled")"
                class="relative inline-flex items-center bg-white px-2 py-1 text-sm font-normal border rounded-r
                    @(HasPreviousPage() ? "text-gray-600 hover:bg-gray-100" : "text-gray-200")">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
            </svg>
        </button>

        <div class="text-sm font-normal text-gray-600 my-2 mx-2">
            Page @(PageNumber) of @(TotalPages)
        </div>

        <button @onclick="@(() => OnChange.InvokeAsync(PageNumber + 1))" disabled="@(HasNextPage() ? null : "disabled")"
                class="relative inline-flex items-center bg-white px-2 py-1 text-sm font-semibold border-y border-l rounded-l
                @(HasNextPage() ? "text-gray-600 hover:bg-gray-100" : "text-gray-200")">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
            </svg>
        </button>

        <button @onclick="@(() => OnChange.InvokeAsync(TotalPages))" disabled="@(HasNextPage() ? null : "disabled")"
                class="relative inline-flex items-center rounded-r-md bg-white px-2 py-1 text-sm font-semibold border rounded-r
                @(HasNextPage() ? "text-gray-600 hover:bg-gray-100" : "text-gray-200")">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M11.25 4.5l7.5 7.5-7.5 7.5m-6-15l7.5 7.5-7.5 7.5" />
            </svg>
        </button>

    </nav>
}

@code {

    [Parameter]
    public int PageNumber { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public int TotalRecords { get; set; }

    [Parameter]
    public EventCallback<int> OnChange { get; set; }

    private int TotalPages = 0;

    protected override void OnParametersSet()
    {
        TotalPages = (int)Math.Ceiling((decimal)TotalRecords / (decimal)PageSize);

        StateHasChanged();
    }

    private bool HasPreviousPage()
    {
        return (PageNumber > 1);
    }

    private bool HasNextPage()
    {
        return (PageNumber < TotalPages);
    }

    private int FromRecord()
    {
        if (PageNumber == 1)
        {
            return 1;
        }

        if (PageNumber > 1)
        {
            return (PageSize * (PageNumber - 1)) + 1;
        }

        return 0;
    }

    private int ToRecord()
    {
        if (PageNumber == 1)
        {
            if (TotalPages > 1) return PageSize;

            return TotalRecords;
        }

        if (PageNumber > 1)
        {
            return (PageSize * (PageNumber - 1)) + PageSize;
        }

        return 0;
    }

}